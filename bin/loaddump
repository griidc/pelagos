#!/bin/bash

# Don't run from normal production. This is for loading dev/test/demo/offsite environments only.
hostname=$(hostname)
if [ $hostname == 'griidc-prod.tamucc.edu' ]; then
    echo "This script is not to be run for production."
    exit
fi

parse_yaml() {
   local prefix=$2
   local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
   sed -ne "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
   awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
      }
   }'
}

if [ ! -f .env.local ]; then
    echo ".env.local not found"
    exit
fi

if [ -z "$1" ]; then
    echo "dumpfile to load not specified."
    exit
fi

if [ ! -f $1 ]; then
    echo "dumpfile specified not found."
    exit
fi

# Manually parse DATABASE_URL from .env.local file

database_url=$(grep "^DATABASE_URL" ./.env.local)
IFS=':' read -ra database_url_parts <<< "$database_url"

# unused
dbtype=${database_url_parts[0]}
dbtype=${dbtype/database_url=/}

parameters__database_user=${database_url_parts[1]}
parameters__database_user=${parameters__database_user/\/\//}

dbpasshost=${database_url_parts[2]}
IFS='@' read -ra passhost_array <<< "$dbpasshost"
parameters__database_password=${passhost_array[0]}
parameters__database_host=${passhost_array[1]}

dbportname=${database_url_parts[3]}
IFS='/' read -ra partname_array <<< "$dbportname"
dbport=${partname_array[0]} # unused
parameters__database_name=${partname_array[1]}

echo "WARNING!!!: This will destroy all data in the $parameters__database_name database on $parameters__database_host!"
read -r -p "Are you sure you want to do this? [y/N] " response
if [[ ! $response =~ ^[yY]$ ]]; then
    echo "Aborted"
    exit
fi

echo "This can also re-index your elastica database."
read -r -p "Are you sure you want to do this? [y/N] " response
ELASTICA_CLEAR=0
if [[ $response =~ ^[yY]$ ]]; then
    ELASTICA_INDEX=1
    echo "You chose to re-index elastica. This will take some additional time."
    read -r -p "By default, the existing index is not cleared. Would you like to clear it? [y/N] " response
    if [[ $response =~ ^[yY]$ ]]; then
        ELASTICA_CLEAR=1
    fi
else
    ELASTICA_INDEX=0
    echo "You chose not to re-index elastica. As a result, contents may be stale."
fi


echo "By default, this load script will append .null to Person email addresses."

read -r -p "Do you want to skip doing this (Dangerous)? [y/N] " response
if [[ $response =~ ^[yY]$ ]]; then
    SKIP_EMAILNULLING=1
    echo "You chose to not add .null to Person emails. Be careful!"
else
    SKIP_EMAILNULLING=0
fi

if [ "$#" -eq 2 ]; then
    export SYMFONY_ENV="$2"
fi

bin/console rabbitmq-supervisor:control stop

# Drop existing database
echo "SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pg_stat_activity.datname = '$parameters__database_name' AND pid <> pg_backend_pid();" | psql -h $parameters__database_host -U postgres || exit
echo "DROP DATABASE $parameters__database_name" | psql -h $parameters__database_host -U postgres || exit
echo "Database $parameters__database_name dropped"
echo "CREATE DATABASE $parameters__database_name" | psql -h $parameters__database_host -U postgres || exit
echo "Created database $parameters__database_name"

# Set Permissions
echo "ALTER DATABASE $parameters__database_name OWNER TO $parameters__database_user" | psql -h $parameters__database_host -U postgres || exit
echo "Database $parameters__database_name ownership set to $parameters__database_user"
echo "CREATE EXTENSION IF NOT EXISTS citext" | psql -h $parameters__database_host -U postgres $parameters__database_name || exit
echo "Loaded citext extension"
echo "CREATE EXTENSION IF NOT EXISTS postgis" | psql -h $parameters__database_host -U postgres $parameters__database_name || exit
echo "Loaded Postgis Extention"
echo "GRANT ALL PRIVILEGES ON TABLE spatial_ref_sys TO $parameters__database_user" | psql -h $parameters__database_host -U postgres $parameters__database_name || exit
echo "Grant permissions to spatial_ref_sys"
echo "GRANT ALL PRIVILEGES ON TABLE geometry_columns TO $parameters__database_user" | psql -h $parameters__database_host -U postgres $parameters__database_name || exit
echo "Grant permissions to geometry_columns"

# Load Dump
echo "Importing database dump";
/usr/bin/psql -h $parameters__database_host -U $parameters__database_user $parameters__database_name < $1

# Reset spatial Permissions
echo "GRANT ALL PRIVILEGES ON TABLE spatial_ref_sys TO $parameters__database_user" | psql -h $parameters__database_host -U postgres $parameters__database_name || exit
echo "Grant permissions to spatial_ref_sys"
echo "GRANT ALL PRIVILEGES ON TABLE geometry_columns TO $parameters__database_user" | psql -h $parameters__database_host -U postgres $parameters__database_name || exit
echo "Grant permissions to geometry_columns"

# .null email addresses
if [ $SKIP_EMAILNULLING -eq 0 ]; then
    echo "UPDATE person SET email_address = email_address||'.null' WHERE email_address NOT LIKE '%.null'" | psql -h $parameters__database_host -U postgres $parameters__database_name || exit
    echo "adding .null email addresses"
fi

export PGPASSWORD="$parameters__database_password"

bin/console doctrine:migrations:migrate -n
echo "Migrated DB schema"

if [ $ELASTICA_CLEAR -eq 1 ]; then
    bin/console fos:elastica:reset
    echo "Cleared existing elastic index."
fi

if [ $ELASTICA_INDEX -eq 1 ]; then
    bin/console elasticsearch:reindex-datasets
    echo "Populated Elasticsearch index"
fi

bin/console rabbitmq-supervisor:control start
