<?xml version="1.0"?>
<ruleset name="GRIIDC">

    <description>A custom coding standard for GRIIDC.</description>

    <exclude-pattern>*/vendor/*</exclude-pattern>

    <!-- Include all sniffs in the PSR2 standard. -->
    <rule ref="PSR2"/>

    <!-- DocBlock rules -->
        <!-- Rules for DocBlock alignment. -->
        <rule ref="Squiz.Commenting.DocCommentAlignment"/>
        <!-- Rules for class DocBlocks. -->
        <rule ref="Squiz.Commenting.ClassComment"/>
        <!-- Ignore unknown tags. -->
        <rule ref="Squiz.Commenting.ClassComment.TagNotAllowed">
            <severity>0</severity>
        </rule>
        <!-- Ignore Type Hints, until we go to PHP 7. -->
        <rule ref="GRIIDC.Commenting.FunctionComment.ScalarTypeHintMissing">
            <severity>0</severity>
        </rule>
        <rule ref="GRIIDC.Commenting.FunctionComment.TypeHintMissing">
            <severity>0</severity>
        </rule>
        <!-- Rules for variable DocBlocks. -->
        <rule ref="Squiz.Commenting.VariableComment"/>
        <!-- Ignore unknown tags. -->
        <rule ref="Squiz.Commenting.VariableComment.TagNotAllowed">
            <severity>0</severity>
        </rule>

    <!-- /DocBlock rules -->

    <!-- Other comment rules -->
        <!-- Warn about FIXME comments. -->
        <rule ref="Generic.Commenting.Fixme"/>
        <!-- Warn about TODO comments. -->
        <rule ref="Generic.Commenting.Todo"/>
        <!-- Check that no perl-style comments are used. -->
        <rule ref="PEAR.Commenting.InlineComment"/>
        <!-- Stricter rules for inline comments. -->
        <!--<rule ref="Squiz.Commenting.InlineComment"/>-->
        <!-- Rules for non-DocBlock block comments. -->
        <rule ref="Squiz.Commenting.BlockComment"/>
        <!-- Don't allow comments on the same line as statements. -->
        <rule ref="Squiz.Commenting.PostStatementComment"/>
        <!-- Require a comment inside an empty catch explaining why exception is not handled. -->
        <rule ref="Squiz.Commenting.EmptyCatchComment"/>
    <!-- /Other comment rules -->

    <!-- Don't allow same class or interface to be defined in multiple files. -->
    <rule ref="Generic.Classes.DuplicateClassName"/>
    <!-- Don't allow for-loops that can be simplified to a while-loop. -->
    <rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop"/>
    <!-- Don't allow the same incrementer in an outer and an inner loop. -->
    <rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>
    <!-- Don't alllow statement conditions that are only set to one of the constant values true or false. -->
    <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>
    <!-- Don't allow the use of the final modifier inside of a final class, which is unnecessary. -->
    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>
    <!-- Check that all function parameters are used in the function body. -->
    <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter"/>
    <!-- Don't allow the use of methods that only call their parent class's method with the same name and arguments. -->
    <rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/>
    <!-- Only allow one class definition per file. -->
    <rule ref="Generic.Files.OneClassPerFile"/>
    <!-- Only allow one interface definition per file. -->
    <rule ref="Generic.Files.OneInterfacePerFile"/>
    <!-- Only allow one trait definition per file. -->
    <rule ref="Generic.Files.OneTraitPerFile"/>
    <!-- Must have a single space after cast tokens. -->
    <rule ref="Generic.Formatting.SpaceAfterCast"/>
    <!--
        Check the cyclomatic complexity (McCabe) for functions.
        The cyclomatic complexity (also called McCabe code metrics) indicates the complexity
        within a function by counting the different paths the function includes.
    -->
    <rule ref="Generic.Metrics.CyclomaticComplexity"/>
    <!-- Check the nesting level for methods. -->
    <rule ref="Generic.Metrics.NestingLevel"/>
    <!-- Favor PHP 5 constructor syntax, which uses "function __construct()". -->
    <rule ref="Generic.NamingConventions.ConstructorName"/>
    <!-- Check that the opening PHP tag is the first content in a file. -->
    <rule ref="Generic.PHP.CharacterBeforePHPOpeningTag"/>
    <!-- Discourage the use of deprecated functions that are kept in PHP for compatibility with older versions. -->
    <rule ref="Generic.PHP.DeprecatedFunctions"/>
    <!-- Make sure that shorthand PHP open tags are not used. -->
    <rule ref="Generic.PHP.DisallowShortOpenTag"/>
    <!-- Don't allow the use of alias functions that are kept in PHP for compatibility with older versions. -->
    <rule ref="Generic.PHP.ForbiddenFunctions"/>
    <!-- Warn about code prefixed with an asperand. -->
    <rule ref="Generic.PHP.NoSilencedErrors"/>
    <!-- Verify that control statements conform to their coding standards. -->
    <rule ref="PEAR.ControlStructures.ControlSignature"/>
    <!-- If an assignment goes over two lines, ensure the equal sign is indented. -->
    <rule ref="PEAR.Formatting.MultiLineAssignment"/>
    <!-- Check that object operators are indented 4 spaces if they are the first thing on a line. -->
    <!-- <rule ref="PEAR.WhiteSpace.ObjectOperatorIndent"/> Temporarily disabling..possible bad check -->
    <!-- Check that the closing braces of scopes are aligned correctly. -->
    <rule ref="PEAR.WhiteSpace.ScopeClosingBrace"/>
    <!-- Ensure that there are no spaces around square brackets. -->
    <rule ref="Squiz.Arrays.ArrayBracketSpacing"/>
    <!-- Make sure that the file name and the name of the class contained within the file match. -->
    <rule ref="Squiz.Classes.ClassFileName"/>
    <!-- Ensures all class keywords are lowercase. -->
    <rule ref="Squiz.Classes.LowercaseClassKeywords"/>
    <!--
        Tests self member references.
        Verifies that :
            self:: is used instead of Self::
            self:: is used for local static member reference
            self:: is used instead of self ::
    -->
    <rule ref="Squiz.Classes.SelfMemberReference"/>
    <!-- Make sure all arithmetic operations are bracketed. -->
    <rule ref="Squiz.Formatting.OperatorBracket"/>
    <!-- Make sure that duplicate arguments are not used in function declarations. -->
    <rule ref="Squiz.Functions.FunctionDuplicateArgument"/>
    <!-- Warn about functions outside of classes. -->
    <rule ref="Squiz.Functions.GlobalFunction"/>
    <!-- Ensure all function keywords are lowercase. -->
    <rule ref="Squiz.Functions.LowercaseFunctionKeywords"/>
    <!-- Make sure variables and member variables use camelCaps. -->
    <rule ref="Squiz.NamingConventions.ValidVariableName"/>
    <!-- Don't require private vraiables to start with underscore. -->
    <rule ref="Squiz.NamingConventions.ValidVariableName.PrivateNoUnderscore">
        <severity>0</severity>
    </rule>
    <!-- Make sure that the ++ operators are used when possible and not used when it makes the code confusing. -->
    <rule ref="Squiz.Operators.IncrementDecrementUsage"/>
    <!-- Warn about commented out code. -->
    <rule ref="Squiz.PHP.CommentedOutCode">
        <properties>
            <!-- Only warn when comment appears to be > 70% code -->
            <property name="maxPercentage" value="70"/>
        </properties>
    </rule>
    <!-- Ensures that there is only one value assignment on a line, and that it is the first thing on the line. -->
    <rule ref="Squiz.PHP.DisallowMultipleAssignments"/>
    <!-- Discourage the use of debug functions. -->
    <rule ref="Squiz.PHP.DiscouragedFunctions"/>
    <!-- Discourage the use of eval(). -->
    <rule ref="Squiz.PHP.Eval"/>
    <!-- Don't allow the use of alias functions that are kept in PHP for compatibility with older versions. -->
    <rule ref="Squiz.PHP.ForbiddenFunctions"/>
    <!-- Don't allow the usage of the "global" keyword. -->
    <rule ref="Squiz.PHP.GlobalKeyword"/>
    <!-- Ensure that functions within functions are never used. -->
    <rule ref="Squiz.PHP.InnerFunctions"/>
    <!-- Ensure all calls to inbuilt PHP functions are lowercase. -->
    <rule ref="Squiz.PHP.LowercasePHPFunctions"/>
    <!-- Warn about code that can never been executed. This happens when a function returns before the code, or a break ends execution of a statement etc. -->
    <rule ref="Squiz.PHP.NonExecutableCode"/>
    <!-- Verify that class members have scope modifiers. -->
    <rule ref="Squiz.Scope.MemberVarScope"/>
    <!-- Verify that class methods have scope modifiers. -->
    <rule ref="Squiz.Scope.MethodScope"/>
    <!-- Check for usage of "$this" in static methods, which will cause runtime errors. -->
    <rule ref="Squiz.Scope.StaticThisUsage"/>
    <!-- Make sure there is one space between the concatenation operator (.) and the strings being concatenated. -->
    <rule ref="Squiz.Strings.ConcatenationSpacing">
        <properties>
            <property name="spacing" value="1"/>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>
    <!-- Only allow doule quoted strings when required. -->
    <rule ref="Squiz.Strings.DoubleQuoteUsage"/>
    <!-- Allow double quoted string to contain variables. -->
    <rule ref="Squiz.Strings.DoubleQuoteUsage.ContainsVar">
        <severity>0</severity>
    </rule>
    <!-- Ensure cast statements don't contain whitespace. -->
    <rule ref="Squiz.WhiteSpace.CastSpacing"/>
    <!-- Ensure all language constructs (without brackets) contain a single space between themselves and their content. -->
    <rule ref="Squiz.WhiteSpace.LanguageConstructSpacing"/>
    <!-- Verify that operators have valid spacing surrounding them. -->
    <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>
    <!-- Verifies that operators have valid spacing surrounding them. -->
    <rule ref="Squiz.WhiteSpace.OperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>
    <!-- Ensure that the colon in a property or label definition has a single space after it and no space before it. -->
    <rule ref="Squiz.WhiteSpace.PropertyLabelSpacing"/>
    <!-- Check that the closing braces of scopes are aligned correctly. -->
    <rule ref="Squiz.WhiteSpace.ScopeClosingBrace"/>
    <!-- Ensure there is a single space after scope keywords. -->
    <rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>
    <!-- Ensure there is no whitespace before a semicolon. -->
    <rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>
    <!-- Checks that no whitespace proceeds the first content of the file, exists after the last content of the file, resides after content on any line, or are two empty lines in functions. -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>

</ruleset>