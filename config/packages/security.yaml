security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        pelagos_account:
            entity:
                class: App\Entity\Account
                property: userId
        person_token:
            id: App\Security\PersonTokenUserProvider

    firewalls:
        # disables authentication for assets and the profiler, adapt it according to your needs
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        account:
            pattern: ^/account
            stateless: true
            # allow anonymous access
            lazy: true
            provider: person_token

            # use a Person Token, if present
            custom_authenticator:
                - App\Security\PersonTokenAuthenticator
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

        main:
            # allow anonymous access
            lazy: true
            provider: pelagos_account
            custom_authenticator:
                - App\Security\LoginFormAuthenticator

            #logout
            logout:
                path: security_logout
                target: pelagos_homepage
            # use REMOTE_USER environment variable if set
            remote_user:
                provider: pelagos_account
            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/log-viewer, roles: [ROLE_DATA_REPOSITORY_MANAGER, ROLE_DEVELOPER] }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon

when@dev:
    security:
        firewalls:
            main:
                switch_user:
                    provider: pelagos_account
                    role: ROLE_DATA_REPOSITORY_MANAGER
