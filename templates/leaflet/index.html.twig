{% extends 'base.html.twig' %}

{% block title %}Hello LeafletController!{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
        integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
        crossorigin=""/>
{% endblock %}

{% block javascripts %}
    {{ parent() }}

    <!-- Make sure you put this AFTER Leaflet's CSS -->
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
        integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
        crossorigin=""></script>

    <!-- Load Esri Leaflet from CDN -->
    <script src="https://unpkg.com/esri-leaflet@3.0.10/dist/esri-leaflet.js"></script>

    <!-- Load Esri Leaflet Vector from CDN -->
    <script src="https://unpkg.com/esri-leaflet-vector@4.2.3/dist/esri-leaflet-vector.js" crossorigin=""></script>

    <!-- Load Leaflet Geoman from CDN -->
    <link rel="stylesheet" href="https://unpkg.com/@geoman-io/leaflet-geoman-free@latest/dist/leaflet-geoman.css" />
    <script src="https://unpkg.com/@geoman-io/leaflet-geoman-free@latest/dist/leaflet-geoman.min.js"></script>

    <!-- Load Additional Leaflet packages for drag/path/edit -->
    <script src="https://unpkg.com/leaflet.path.drag@0.0.6/src/Path.Drag.js"></script>
    <script src="https://unpkg.com/leaflet-editable@1.2.0/src/Leaflet.Editable.js"></script>

    <script type="text/javascript">
        const esri_api_key = "{{ esri_api_key }}";

        const GRIIDCStyle = {
            "color": "orange",
            "weight": 4,
            "opacity": 1,
            "fillOpacity": 0.15,
        };

        const map = L.map('map', {
            preferCanvas: true,
            zoomSnap: 0.1,
            editable: true,
        });

        const basemapEnum = "ArcGIS:Imagery";
        L.esri.Vector.vectorBasemapLayer(basemapEnum, {
            apiKey: esri_api_key
        }).addTo(map)

        const geoQueryLayer = L.featureGroup().addTo(map);
        map.pm.setGlobalOptions({
            layerGroup: geoQueryLayer,
        });

        // This leaves box and polygon tool enabled, which is probably what we want.
        map.pm.addControls({
            editControls: false,
            drawMarker:false,
            drawPolyline: false,
            drawCircle:false,
            drawText:false,
            drawCircleMarker:false,
      });

        map.on("pm:create", function (e) {
            var queryGeoJson = geoQueryLayer.toGeoJSON();
            console.log(queryGeoJson);
        });

        const url = '/leaflet/json/{{ udi }}';

        const response = fetch(url).then(response => response.json()).then(response => {
            const geojsonMarkerOptions = {
            radius: 12,
            fill: false,
            weight: 4,
            opacity: 1,
        };
            const geojsonLayer=L.geoJson(response, {
                pointToLayer: function (feature, latlng) {
                    return L.circleMarker(latlng, geojsonMarkerOptions);
                },
                style: GRIIDCStyle,
                onEachFeature: function(feature, layer) {
                    console.log(feature);
                    layer.bindTooltip(feature.properties.name.toString()),
                    {permanent: true, className: 'label'};
                }
            }).addTo(map);
            map.fitBounds(geojsonLayer.getBounds(), {padding: [20, 20]});
        })
</script>
{% endblock %}

{% block body %}
<style>
    .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
    .example-wrapper code { background: #F5F5F5; padding: 2px 6px; }
    #map { height: 450px; }
</style>

<div class="example-wrapper">
    Leaflet-Based Mapping Proof-of-Concept<br />
     <div id="map"></div>
</div>
{% endblock %}
